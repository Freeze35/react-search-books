{"ast":null,"code":"import axios from \"axios\";\nconst GOOGLE_KEY = process.env.REACT_APP_SECRET_GOOGLE_API_KEY;\n//create global Variables\nconst fetchVariables = (booksStore, maxResults, startIndex, subjectCategory, orderBy) => {\n  //calculate our maxResults if request are low\n  // (for example: 47 books all, we call them by our maxRequest,\n  // but our first enter it's maxRequest=15 for correct we calculate)\n  const newMaxIndex = () => {\n    if (Number(booksStore.books.totalItems) - Number(maxResults) - Number(startIndex) < 0) {\n      console.log(Number(booksStore.books.totalItems) - Number(startIndex));\n      return maxResults = `${Number(booksStore.books.totalItems) - Number(startIndex)}`;\n    } else {\n      return maxResults;\n    }\n  };\n  //set Category type\n  let setCategory = () => {\n    return subjectCategory ? `+subject:${subjectCategory}` : \"\";\n  };\n  newMaxIndex();\n  //set api maxResults\n  let maxResultsApi = `&maxResults=${maxResults}`;\n  //set api startIndex\n  let startIndexApi = `&startIndex=${startIndex}`;\n  //set Order by, default:relevance\n  let orderByApi = `&orderBy=${orderBy}`;\n  return {\n    maxResultsApi,\n    startIndexApi,\n    setCategory,\n    orderByApi\n  };\n};\n\n//Create our GoogleAPI request using axios and return our response\n//Beginning setLoader\nconst setLineRequestAndGetData = async (searchQuery, booksStore, orderBy, subjectCategory, maxResults, startIndex) => {\n  const fetchVars = fetchVariables(booksStore, maxResults, startIndex, subjectCategory, orderBy);\n\n  //Return our response => on out change data(response.data) //(use +`${}` for better reading)\n  return await axios.get(`https://www.googleapis.com/books/v1/volumes?q=` + `${searchQuery}` + `${fetchVars.setCategory()}` + `${fetchVars.orderByApi}` + `${fetchVars.maxResultsApi}` + `${fetchVars.startIndexApi}` + `&key=${GOOGLE_KEY}`);\n};\n\n//call our books first time 10 books 1 request\nexport const fetchBooksFirstTime = async function (searchQuery, booksStore) {\n  let orderBy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"relevance\";\n  let subjectCategory = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  let maxResults = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"10\";\n  let startIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"0\";\n  try {\n    booksStore.setIsLoading(true);\n    //cleanup our list of books\n    booksStore.setBooks({});\n    //call our delegation function and get response data back\n    setLineRequestAndGetData(searchQuery, booksStore, orderBy, subjectCategory, maxResults, startIndex).then(response => {\n      booksStore.setBooks(response.data);\n      booksStore.setIsLoading(false);\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n//Add book to our exists 10 books\nexport const fetchAddingBooks = async function (searchQuery, booksStore) {\n  let orderBy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"relevance\";\n  let subjectCategory = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  let maxResults = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"10\";\n  let startIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"10\";\n  try {\n    booksStore.setIsLoading(true);\n    if (Number(booksStore.books.totalItems) - Number(startIndex) > 0) {\n      //call our delegation function and get response data back\n      setLineRequestAndGetData(searchQuery, booksStore, orderBy, subjectCategory, maxResults, startIndex).then(response => {\n        //spread old list and add new list then push new data to Store. Mobx set new Proxy for elements\n        response.data.items = [...booksStore.books.items, ...response.data.items];\n        booksStore.setBookChangeList(response.data);\n\n        //change to number(STartIndex and maxResults) our Start Index and set new Index\n        booksStore.setStartIndexFetchApi(`${Number(booksStore.startIndexFetchApi) + Number(maxResults)}`);\n        booksStore.setIsLoading(false);\n      });\n    } else {\n      booksStore.setIsLoading(false);\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// getting on book by id using it for render BookPage\nexport const fetchOneBook = async BookId => {\n  try {\n    let response = await axios.get(`https://www.googleapis.com/books/v1/volumes/\n            ${BookId}?key=AIzaSyBGsfkXWsf_vXKf3SrvDmjByo0XQ3LvZuM`);\n    return response.data;\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["axios","GOOGLE_KEY","process","env","REACT_APP_SECRET_GOOGLE_API_KEY","fetchVariables","booksStore","maxResults","startIndex","subjectCategory","orderBy","newMaxIndex","Number","books","totalItems","console","log","setCategory","maxResultsApi","startIndexApi","orderByApi","setLineRequestAndGetData","searchQuery","fetchVars","get","fetchBooksFirstTime","arguments","length","undefined","setIsLoading","setBooks","then","response","data","e","fetchAddingBooks","items","setBookChangeList","setStartIndexFetchApi","startIndexFetchApi","fetchOneBook","BookId"],"sources":["D:/T/online-store/search-for-books/client/src/api/fetchingApi.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport BooksStore from \"../store/BooksStore\";\r\n\r\nconst GOOGLE_KEY: string | undefined = process.env.REACT_APP_SECRET_GOOGLE_API_KEY\r\n\r\ninterface returnFetchVaribles {\r\n    maxResultsApi: string,\r\n    startIndexApi: string,\r\n    setCategory: () => string,\r\n    orderByApi: string\r\n\r\n}\r\n\r\n//create global Variables\r\nconst fetchVariables = (booksStore: BooksStore, maxResults: string, startIndex: string,\r\n                        subjectCategory: string, orderBy: string): returnFetchVaribles => {\r\n\r\n    //calculate our maxResults if request are low\r\n    // (for example: 47 books all, we call them by our maxRequest,\r\n    // but our first enter it's maxRequest=15 for correct we calculate)\r\n    const newMaxIndex = () => {\r\n        if (Number(booksStore.books.totalItems) - Number(maxResults) - Number(startIndex) < 0) {\r\n            console.log(Number(booksStore.books.totalItems) - Number(startIndex))\r\n            return maxResults = `${Number(booksStore.books.totalItems) - Number(startIndex)}`\r\n        } else {\r\n            return maxResults\r\n        }\r\n    }\r\n    //set Category type\r\n    let setCategory = (): string => {\r\n        return subjectCategory\r\n            ? `+subject:${subjectCategory}`\r\n            : \"\";\r\n    }\r\n\r\n    newMaxIndex()\r\n    //set api maxResults\r\n    let maxResultsApi = `&maxResults=${maxResults}`\r\n    //set api startIndex\r\n    let startIndexApi = `&startIndex=${startIndex}`\r\n    //set Order by, default:relevance\r\n    let orderByApi: string = `&orderBy=${orderBy}`\r\n    return {maxResultsApi, startIndexApi, setCategory, orderByApi} as returnFetchVaribles\r\n}\r\n\r\n//Create our GoogleAPI request using axios and return our response\r\n//Beginning setLoader\r\nconst setLineRequestAndGetData = async (searchQuery: string, booksStore: BooksStore,\r\n                                        orderBy: string, subjectCategory: string,\r\n                                        maxResults: string, startIndex: string) => {\r\n\r\n    const fetchVars = fetchVariables(booksStore, maxResults, startIndex, subjectCategory, orderBy)\r\n\r\n    //Return our response => on out change data(response.data) //(use +`${}` for better reading)\r\n    return await axios.get(\r\n        `https://www.googleapis.com/books/v1/volumes?q=`\r\n        + `${searchQuery}`\r\n        + `${fetchVars.setCategory()}`\r\n        + `${fetchVars.orderByApi}`\r\n        + `${fetchVars.maxResultsApi}`\r\n        + `${fetchVars.startIndexApi}`\r\n        + `&key=${GOOGLE_KEY}`)\r\n}\r\n\r\n//call our books first time 10 books 1 request\r\nexport const fetchBooksFirstTime = async (searchQuery: string, booksStore: BooksStore,\r\n                                          orderBy = \"relevance\", subjectCategory = \"\",\r\n                                          maxResults = \"10\", startIndex = \"0\") => {\r\n\r\n    try {\r\n\r\n        booksStore.setIsLoading(true)\r\n        //cleanup our list of books\r\n        booksStore.setBooks({})\r\n            //call our delegation function and get response data back\r\n            setLineRequestAndGetData(searchQuery, booksStore, orderBy, subjectCategory, maxResults, startIndex)\r\n                .then(response => {\r\n                        booksStore.setBooks(response.data)\r\n                        booksStore.setIsLoading(false)\r\n                    }\r\n                )\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n\r\n}\r\n\r\n//Add book to our exists 10 books\r\nexport const fetchAddingBooks = async (searchQuery: string, booksStore: BooksStore,\r\n                                       orderBy = \"relevance\", subjectCategory = \"\",\r\n                                       maxResults = \"10\", startIndex = \"10\") => {\r\n\r\n    try {\r\n        booksStore.setIsLoading(true)\r\n\r\n        if (Number(booksStore.books.totalItems) - Number(startIndex)>0) {\r\n\r\n            //call our delegation function and get response data back\r\n            setLineRequestAndGetData(searchQuery, booksStore, orderBy, subjectCategory, maxResults, startIndex)\r\n                .then(response => {\r\n                        //spread old list and add new list then push new data to Store. Mobx set new Proxy for elements\r\n                        response.data.items = [...booksStore.books.items as [], ...response.data.items]\r\n                        booksStore.setBookChangeList(response.data)\r\n\r\n                        //change to number(STartIndex and maxResults) our Start Index and set new Index\r\n                        booksStore.setStartIndexFetchApi(`${Number(booksStore.startIndexFetchApi) + Number(maxResults)}`)\r\n                        booksStore.setIsLoading(false)\r\n                    }\r\n                )\r\n        } else {\r\n            booksStore.setIsLoading(false)\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n// getting on book by id using it for render BookPage\r\nexport const fetchOneBook = async (BookId: string | undefined) => {\r\n    try {\r\n        let response = await axios.get(\r\n            `https://www.googleapis.com/books/v1/volumes/\r\n            ${BookId}?key=AIzaSyBGsfkXWsf_vXKf3SrvDmjByo0XQ3LvZuM`)\r\n        return (response.data)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}